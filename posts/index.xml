<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Etienne Caron</title>
    <link>https://kanawish.com/posts/</link>
    <description>Recent content in Posts on Etienne Caron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 May 2019 15:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kanawish.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DIY Reactive Model Store using RxJava</title>
      <link>https://kanawish.com/posts/001-rxjava-modelstore/</link>
      <pubDate>Sun, 05 May 2019 15:00:00 +0000</pubDate>
      
      <guid>https://kanawish.com/posts/001-rxjava-modelstore/</guid>
      <description>In the last few years on Android, we&amp;rsquo;ve seen an explosion of architectures based on the idea of a unidirectional data flow.
I was first exposed to this idea while working on an MVI-based app using RxJava. One of the key concepts in MVI is to cleanly manage changes to your appication&amp;rsquo;s state.
Working with Immutable State So, what does a Model Store do, exactly? It keeps a copy of an immutable state.</description>
    </item>
    
  </channel>
</rss>